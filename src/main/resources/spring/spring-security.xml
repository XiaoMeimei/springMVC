<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.1.xsd">
	
	<!--  Spring-Security 的配置 -->
	<!-- 注意use-expressions=true.表示开启表达式,否则表达式将不可用.
	see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html
	 -->
	<security:http auto-config="true" use-expressions="true" access-denied-page="/user/denied" >
		
		<security:intercept-url pattern="/user/login" access="permitAll"/>
		<!-- <security:intercept-url pattern="/user/register" access="permitAll"/> -->
		<security:intercept-url pattern="/main/home" access="permitAll"/>
		<security:intercept-url pattern="/main/admin" access="hasAnyRole('ROLE_ADMIN','ROLE_USER')"/>
		<security:intercept-url pattern="/main/common" access="hasRole('ROLE_USER')"/>
		
		<security:form-login
				login-page="/user/login" 
				authentication-failure-url="/user/login?error=true" 
				default-target-url="/file/userFiles"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/user/login" 
				logout-url="/user/logout"/>
	
	</security:http>
	
	<!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
	<security:authentication-manager>
	 	<security:authentication-provider user-service-ref="userDetailsService">
 	        <security:password-encoder ref="passwordEncoder"/>
	    </security:authentication-provider>
	</security:authentication-manager>
	
	<!-- 对密码进行MD5编码 -->
	<bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>

	<bean id="userDetailsService" class="com.ivy.service.impl.UserDetailsServiceImpl" />  
	<!-- 
		通过 customUserDetailsService,Spring会自动的用户的访问级别.
		也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
	 -->
<!-- 	<bean id="customUserDetailsService" class="com.demo.service.CustomUserDetailsService"/> -->
	
</beans>
